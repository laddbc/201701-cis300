#+STARTUP: showall
#+TITLE: Syllabus for CIS 300 Foundations of Computer Science
#+AUTHOR: Brian C. Ladd
#+DATE: Spring 2017
#+TODO: TODO COLLECTED | GRADED
#+TODO: TODO | DONE

* Course details
  :PROPERTIES:
  :VISIBILITY: folded
  :END:

- Course: CIS 300 Foundations of Computer Science

- Instructor: Dr Brian C. Ladd <[[mailto:laddbc@potsdam.edu]]>
  301 Dunn Hall
- Teaching Assistant
  - Eli Auslander <[[mailto:auslanem196@potsdam.edu]]>

- Textbook: Rosen, _Discrete Mathematics and Its Applications, 7E_

- Notes and the like: This course will be using techela (pronounced "tequela"), an Emacs package from CMU that supports making assignments, grading assignments, and even viewing equations right in the editor. This is *experimental* for me (hence only using it in this course).
  - So, you have access to a virtual machine image [[TBD]] that has git, emacs, and techela installed. You are not required to use this setup; you are required to turn in homework in appropriately named repositories for grading.
  - Notice: You are going to learn how to typeset equations using LaTeX markup. Yes, that may stand between you and the material for a little while, but readability for graders is much, much better with typesetting.


** Course description - Foundations of Computer Science

An introduction to the logical and quantitative foundations of computer science. Topics include introductions to: formal proof techniques, logic, sets, relations, partial order, number systems, combinatorics, graphs and trees, and matrix arithmetic. Prerequisites: CIS 201. Spring.

** Course overview
This course is the gateway to theoretical computer science. Discrete mathematics is the study of *discrete*, or separate, objects. Where calculus studies continuous functions (and hence real numbers), discrete mathematics studies separate objects, functions on them, sets of them (and hence focuses on integers).

This course begins by laying out first-order predicate logic and describing how to use axioms, logic, and inference rules to *prove* mathematical theorems. [fn::Yes, it is *only* a theorem. Of course in mathematics, being only a theorem means that it has been rigorously proved to be true.] Discrete structures such as sets, matrices, functions, and graphs are then presented and used as fertile fields to practice proving theorems.

In the middle of this course there is a section on mathematical induction and recursion. This is, perhaps, the most important part of the course, as it is proof by induction that makes possible many of the proofs underlying the theory of computation (and certainly complexity).

** Learning Objectives and Outcomes
The Computer Science department has adopted ten learning objectives for students completing an undergraduate major or minor in the department. Each course in the curriculum is designed to address particular objectives so that the overall curriculum fulfills our goal of producing capable computer scientists. The objectives (and broad outcomes) serve as a rubric for evaluating the learning that happens in this class. You may wish to review this section of the syllabus when filling out the course evaluation and especially when studying for midterm and final exams.

*** Objectives
Students in the Computer Science program at SUNY Potsdam are expected to graduate with a:

**** knowledge of discrete and continuous mathematics – including elementary probability and statistics – and the ability to apply logic and mathematical proof techniques to computing problems.

/Students understand how to translate natural language statements into quantified and non-quantified statements in first-order predicate logic. Students can invert statements in first-order predicate logic. Students can write truth tables. Students can apply rules of inference, truth tables, and weak and strong induction to prove mathematical theorems./

**** knowledge of basic theory of computability and complexity of computation.

*Not applicable to CIS 300.*

**** knowledge of and the ability to apply programming fundamentals in at least two programming languages.

*Not applicable to CIS 300.*

**** knowledge of fundamental data structures and algorithms – including analysis of their correctness and complexity – related to various fields of computer science, and the ability to apply this knowledge to problems through the use of appropriate programming languages.

/Students are expected to be able to describe one or more computer
representations of discrete data structures: sets, matrices, and functions. They are also expected to be able to discuss running-time implications of different representations./

**** knowledge of computer architecture and organization, computer operating systems, and computer networks, and the ability to apply this knowledge to problems through the use of appropriate programming languages.

*Not applicable to CIS 300.*

**** competence and effectiveness in technical oral, written, and visual communication, particularly as they apply to the dissemination of technical information on subjects dealing with computing technology and applications.

*Not applicable to CIS 300.*

**** knowledge of and skill in applying good practices in software engineering.

*Not applicable to CIS 300.*

**** the ability to function effectively in teams to accomplish a common goal.

*Not applicable to CIS 300.*

**** an understanding of professional, ethical, legal, security, and social responsibilities and issues, including an awareness of impact of computing on individuals, organizations and society.

*Not applicable to CIS 300.*

**** a commitment to continuing professional development.

*Not applicable to CIS 300.*

*** Outcomes
 Upon completing this course, students should be able to
**** Prove discrete mathematics facts using direct, indirect, and inductive techniques.

**** Explain the relationship between induction and recursion.

**** Define and operate on sets with union, intersection, compliment, and cross product. Apply the powerset operator (and count the members in the result).

**** Define and operate on relations: transitive closure, determine predicates that apply (antisymmetric, symmetric, transitive, associative, commutative).

**** Understand the definition of equivalence relations. Change between partition and equivalence relation notations.

**** Be able to generate permutations and combinations of objects from sets.
** Grading
This is a 300-level course in one of your major fields. You will be evaluated on both your thinking about the course content and your ability to communicate your thinking. This means that your writing must be clear, concise, and in proper English (the language of the course). The proofs should be complete with a statement of givens, that which is to be proven, and a logical progression of statements proving it.

#+caption: Categories and weights for graded
#+tblname: categories
| Category | weight |
|----------+--------|
| homework |   0.20 |
| quiz     |   0.10 |
| exam1    |   0.10 |
| exam2    |   0.15 |
| exam3    |   0.20 |
| final    |   0.25 |


Homeworks will be assigned about three times a week. Each assignment will typically be one to four problems requiring up to an hour to complete.

Quizzes will be given in class. You should be prepared to take a quiz at any time. These will typically be short, timed problems.

Exams will be scheduled and given during class.

You should bring your computer to class every day. You will need it to follow the lecture notes, to participate in class exercises, and to complete quizzes and exams. You are responsible for ensuring the battery is charged, that you can connect to the internet, and that the software required for the course is installed and working. There will not be any makeup assignments.

Late assignments will automatically lose 50% of their points. Late assignments can only be turned in by email.

*** Grading criteria
You are transitioning into a young professional at this point. That means assignments are done professionally too. In addition to the technical correctness of your work, we will also be assessing the professionalism with which it is presented. Each assignment will show the rubric it will be graded with at the top of the file.

There will be a straight scale (no curve) so you will always know exactly what your grade is at all times. Each problem will be graded considering the approach used, the correctness of the answer, the neatness and quality of presentation, etc... Each category of the rubric will be given a letter grade that indicates your level of performance in that category.

"A" work has the following characteristics: The correct approach is used and the problem is set up correctly. The work is not over-simplified and it is easy to see it is done correctly. Any assumptions made were stated and justified. The answers are correct or only the most trivial errors are present, and were identified by the student. All of the correct units were used. The presentation is complete, clear, logical, neat and in order. Error analysis was performed if appropriate. Any figures used have properly labeled axes with units, and a legend if there is more than one curve. Essentially everything that should have been done was done and done correctly. This is the kind of work an employer wants their employees to do, and the kind of work you will be promoted for doing. You should be proud of this work.

"B" work is deficient in one or more of the properties of "A" work. It might be basically right, but essential details are missing such as units, or the presentation is sloppy. You will get by with this kind of work, but you should not expect to be praised for it.

"C" quality work is deficient in more than two of the properties of "A" work. You would probably not get fired for this kind of work, but you may be notified you need to improve and you should not expect any kind of promotion. This is the bare minimum of expected performance.

"D" work is not considered acceptable performance. Repeat offenses could lead to the loss of your job.

"R" work is totally unacceptable performance. You will be fired.

plus/minus modifiers will be used to provide finer grained grades.

Each problem will have a point value associated with it. The letter grade you get serves as a multiplier on that point value. The multipliers are:

| Lettergrade | multiplier |
|-------------+------------|
| A++         |          1 |
| A+          |       0.95 |
| A           |        0.9 |
| A-          |       0.85 |
| A/B         |        0.8 |
| B+          |       0.75 |
| B           |        0.7 |
| B-          |       0.65 |
| B/C         |        0.6 |
| C+          |       0.55 |
| C           |        0.5 |
| C-          |       0.45 |
| C/D         |        0.4 |
| D+          |       0.35 |
| D           |        0.3 |
| D-          |       0.25 |
| D/R         |        0.2 |
| R+          |       0.15 |
| R           |        0.1 |
| R-          |       0.05 |
| R- -        |        0.0 |

At the end of the semester I will calculate what fraction of the possible points you have earned, and your grade will be based on this distribution:

| 80% >= grade         | A |
| 60% >= grade < 80    | B |
| 40% >= grade < 60    | C |
| 20% >= grade < 40    | D |
| grade < 20%          | R |

Note that the standard grade for correct work is an "A", which is not equal to "100%". It is worth 90%, which is well above the cutoff for an A. The A+ and A++ designations are reserved for work that is well above "correct".

** Academic honesty
All work is expected to be your original work. You may work with class members to solve the homework problems, but you must turn in your own solutions. It is cheating to turn in someone else's work as your own. If you use code from the internet or the course notes, you should note this in your solution. Duplicated assignments (e.g. two students who turn in the same work) will receive zeros and a warning. Repeat offenses will be reported as academic dishonesty.

** Religious holidays
We will accommodate religious holidays when possible. If your work will be affected by a religious holiday, you must inform Professor Kitchin as early as possible to work out an accommodation in advance.

** Take care of yourself
Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress.

All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful.

* Announcements

* Class schedule
  :PROPERTIES:
  :CUSTOM_ID: schedule
  :END:

** DONE <2017-01-23 Mon 13:00> Introduction to material, course, software.
** DONE <2017-01-24 Tue 14:00> [[file:notes/propositional-logic.org]]
** DONE <2017-01-25 Wed 13:00>
** DONE <2017-01-27 Fri 13:00> [[file:notes/propositional-equivalence.org]]
                                [[file:notes/showing-propositional-equivalence.org]]


** DONE <2017-01-30 Mon 13:00> [[file:notes/related-implications.org]]
Reading: Rosen 1.2 - 1.3
** TODO <2017-01-31 Tue 14:00> [[file:notes/predicates-and-quantifiers.org]]
** TODO <2017-02-01 Wed 13:00>
** TODO <2017-02-03 Fri 13:00>


** TODO <2017-02-06 Mon 13:00>
** TODO <2017-02-07 Tue 14:00>
** TODO <2017-02-08 Wed 13:00>
** TODO <2017-02-10 Fri 13:00>


** TODO <2017-02-13 Mon 13:00>
** TODO <2017-02-14 Tue 14:00>
** TODO <2017-02-15 Wed 13:00> Exam 1
** TODO <2017-02-17 Fri 13:00>


** TODO <2017-02-22 Wed 13:00>
** TODO <2017-02-24 Fri 13:00>


** TODO <2017-02-27 Mon 13:00>
** TODO <2017-02-28 Tue 14:00>
** TODO <2017-03-01 Wed 13:00>
** TODO <2017-03-03 Fri 13:00>


** TODO <2017-03-06 Mon 13:00>
** TODO <2017-03-07 Tue 14:00>
** TODO <2017-03-08 Wed 13:00>
** TODO <2017-03-10 Fri 13:00>


** TODO <2017-03-13 Mon 13:00>
** TODO <2017-03-14 Tue 14:00>
** TODO <2017-03-15 Wed 13:00> Exam 2
** TODO <2017-03-17 Fri 13:00>


** TODO <2017-03-20 Mon 13:00>
** TODO <2017-03-21 Tue 14:00>
** TODO <2017-03-22 Wed 13:00>
** TODO <2017-03-24 Fri 13:00>


** TODO <2017-04-03 Mon 13:00>
** TODO <2017-04-04 Tue 14:00>
** TODO <2017-04-05 Wed 13:00>
** TODO <2017-04-07 Fri 13:00>


** TODO <2017-04-10 Mon 13:00>
** TODO <2017-04-11 Tue 14:00>
** TODO <2017-04-12 Wed 13:00>
** TODO <2017-04-14 Fri 13:00>


** TODO <2017-04-17 Mon 13:00> Exam 3
** TODO <2017-04-18 Tue 14:00>
** TODO <2017-04-19 Wed 13:00>
** TODO <2017-04-21 Fri 13:00>


** TODO <2017-04-24 Mon 13:00>
** TODO <2017-04-25 Tue 14:00>
** TODO <2017-04-26 Wed 13:00>
** TODO <2017-04-28 Fri 13:00>


** TODO <2017-05-01 Mon 13:00>
** TODO <2017-05-02 Tue 14:00>
** TODO <2017-05-03 Wed 13:00>
** TODO <2017-05-05 Fri 13:00>


** TODO <2017-05-08 Mon 13:00>
** TODO <2017-05-09 Tue 14:00>
** TODO <2017-05-10 Wed 13:00>
** TODO <2017-05-12 Fri 13:00>


** TODO <2017-05-16 Tue 08:00> Final Exam

* Assignments
  :PROPERTIES:
  :CUSTOM_ID: assignments
  :END:

  [[elisp:tq-agenda][Upcoming assignments]]

** TODO assignment:rosen1.1-2-8 :assignment:
   DEADLINE: <2017-02-01 Wed>
   :PROPERTIES:
   :CATEGORY: homework
   :POINTS:   10
   :CUSTOM_ID: rosen1.1-2-8
   :RUBRIC:   (("technical" . 0.7) ("presentation" . 0.3))
   :END:

** TODO assignment:rosen1.1-1.6 :assignment:
   DEADLINE: <2017-02-06 Mon>
   :PROPERTIES:
   :CATEGORY: homework
   :POINTS:   10
   :CUSTOM_ID: rosen1.1-1.6
   :RUBRIC:   (("technical" . 0.7) ("presentation" . 0.3))
   :END:

